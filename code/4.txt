Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

class Solution{
	public:
	    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2){
	        int size1 = nums1.size();
	        int size2 = nums2.size();
	        int mid = (size1 + size2) / 2;
	        double res1 = findkth(nums1.begin(), size1, nums2.begin(), size2, mid+1);
	        if((size1+size2) % 2 == 0){
	            double res2 = findkth(nums1.begin(), size1, nums2.begin(), size2, mid);
	            return (res1+res2)/2;
	        }
	        return res1;
	    }

        typedef vector<int>::iterator Iter;

	    double findkth(Iter nums1, int m, Iter nums2, int n, int k){
            if(m > n)  return findkth(nums2, n, nums1, m, k);
            if(m == 0)  return nums2[k-1];
            if(k == 1)  return min(nums1[0], nums2[0]);

            int i = min(m, k/2);
            int j = k - i;
            
            if(nums1[i-1] < nums2[j-1]) return findkth(nums1+i, m-i, nums2, n, k-i);
            else return findkth(nums1, m, nums2+j, n-j, k-j);
	    }
};


We could use regular findKth function to deal with the median value. Time cost is O(log(min(m,n)))