Swap Nodes in Pairs 

Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head || !head->next)  return head;
        ListNode *pre = NULL;
        ListNode *fir=head, *sec=head->next;
        head = sec;
        while(true){
            ListNode* next = sec->next;
            if(pre != NULL)  pre->next = sec;
            sec->next = fir;
            fir->next = next;
            if(!next || !next->next)  break;
            pre = fir;
            fir = next;
            sec = fir->next;
        }
        return head;
    }
};