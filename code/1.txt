Two Sum

Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2


class Solution{
	public:
		vector<int> twoSum(vector<int>& nums, int target){
			std::map<int, int> map;
			for(int i=0; i<nums.size(); i++){
				auto itr = map.find(nums[i]);
				if(itr != map.end())  return std::vector<int> {itr->second+1, i+1};
				else  map[target - nums[i]] = i;
			}
		}
};



The inituitive idea is to use map container to store value. Therefore, in the first iteration of nums, we search its value in the map. if we find it, then return i and the location stored in map, if failed, just store target-num[i] and its position in map. The time is O(n) and space is O(n).